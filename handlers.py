import kb
import text
import utils
import db

from aiogram import types, F, Router, flags
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from aiogram.filters import Command

from misc import dp, bot
from states import Gen

# START
@dp.message(Command("start"))
async def start_handler(msg: Message):
    await msg.answer(text.greet.format(name=msg.from_user.full_name), reply_markup=kb.reply_markup)
    await msg.answer("MENU", reply_markup=kb.menu_markup)

# MENU
@dp.message(F.text == "üìç–ú–µ–Ω—é")
@dp.message(F.text == "/menu")  
async def process_menu_button(msg: Message):
    await msg.answer(text.menu, reply_markup=kb.menu_markup)

# BONUS
@dp.callback_query(F.data == "get_bonus")
async def process_get_bonus_button(callback_query: types.CallbackQuery): 
    if (db.bonuses_available > 0): 
        utils.bonus_open()
        msg = "–±–æ–Ω—É—Å –ø–æ–ª—É—á–µ–Ω: " + ( '%.2f' %(db.bonus_size/100)) + " —Ä—É–±–ª–µ–π\n" + "–ë–∞–ª–∞–Ω—Å: " + ( '%.2f' %(utils.get_balance()/100)) + " —Ä—É–±–ª–µ–π"
        await bot.answer_callback_query(callback_query.id)
        await bot.send_message(callback_query.from_user.id, msg)
    else:
        msg = "–ü–æ–ª—É—á–∏—Ç–µ –±–æ–Ω—É—Å –∑–∞ –∫–∞–∂–¥–æ–≥–æ –≤–∞—à–µ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞\
        \n\n–ë–æ–Ω—É—Å—ã —Ä–∞–∑—ã–≥—Ä—ã–≤–∞—é—Ç—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å! \n–ú—ã –æ—Ç–ø—Ä–∞–≤–∏–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –ø—Ä–∏–¥–µ—Ç –±–æ–Ω—É—Å."
        await bot.answer_callback_query(callback_query.id)
        await bot.send_message(callback_query.from_user.id, msg, reply_markup=kb.share_button)

@dp.message(F.text == "üéÅ–ë–æ–Ω—É—Å—ã")  
async def process_get_bonus_button(msg: Message):
    await msg.answer("–î–æ—Å—Ç—É–ø–Ω–æ –±–æ–Ω—É—Å–æ–≤: " + str(db.bonuses_available), reply_markup=kb.bonus_button)

@dp.callback_query(F.data == "bonuses")
async def process_get_bonus_button(callback_query: types.CallbackQuery):
    msg = "–î–æ—Å—Ç—É–ø–Ω–æ –±–æ–Ω—É—Å–æ–≤: " + str(db.bonuses_available)
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, msg, reply_markup=kb.bonus_button)

# SHARE
@dp.callback_query(F.data == "share")
async def process_share_button(callback_query: types.CallbackQuery):
    db.bonuses_available += 1
    msg = "–í—ã –ø–æ–ª—É—á–∏–ª–∏ –±–æ–Ω—É—Å!"
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, msg)


#PROFILE
@dp.callback_query(F.data == "profile")
async def process_profile_button(callback_query: types.CallbackQuery):
    msg = "–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å "
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, msg)

#BALANCE

@dp.callback_query(F.data == "balance")
@dp.message(F.text == "üí≥–ë–∞–ª–∞–Ω—Å")
@dp.message(F.text == "/balance")  
async def me_balance_button(msg: Message):
    text_balance = "–ù–ï–î–í–ò–ñ–ò–ú–û–°–¢–¨(25%): " + ( '%.2f' %(db.real_estate/100)) + "—Ä—É–±–ª–µ–π" +\
    "\n\n–†–æ—Å—Ç—Å—á–µ—Ç(20%): " + ( '%.2f' %(db.grow_wallet/100)) + "—Ä—É–±–ª–µ–π" +\
    "\n\n–ö–æ—à–µ–ª–µ–∫(0%): " + ( '%.2f' %(db.liquid_wallet/100)) + "—Ä—É–±–ª–µ–π"
    await msg.answer(text_balance, reply_markup=kb.transfer_button)

# @dp.callback_query(F.data == "balance")




@dp.message(Command("1"))
async def process_1_command(message: types.Message):
    await message.answer("inline 1", reply_markup=kb.iexit_kb)


# @dp.message(lambda message: message.text in ['hi4'])
# async def process_hi4_command(message: types.Message):
#     await message.reply("–ß–µ—Ç–≤–µ—Ä—Ç–æ–µ - —Ä–∞—Å—Å—Ç–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥", reply_markup=kb.markup1)
# # async def message_handler(msg: Message):
# #     await msg.answer(f"–¢–≤–æ–π ID: {msg.from_user.id}")

# @dp.message(lambda message: message.text in ['–ü—Ä–æ—Ñ–∏–ª—å', '–ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞', '–ë–∞–Ω–∫', '–†–µ—Å—É—Ä—Å—ã'])
# async def menu_handler(message: types.Message):
#     await message.answer(f"–¢—ã –≤—ã–±—Ä–∞–ª —Ä–∞–∑–¥–µ–ª {message.text}")