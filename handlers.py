import kb
import texts
import utils
import config
import database #import SessionLocal, User

from misc import dp, bot


from aiogram import types, F, Router, flags
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message
from aiogram.filters import Command, CommandStart, CommandObject, StateFilter
from aiogram.utils.deep_linking import create_start_link, decode_payload
from sqlalchemy.sql import func
from aiogram.methods.get_chat import GetChat
from aiogram.types import (
    KeyboardButton,
    Message,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
)

#     –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ https://t.me/aiogram/28
#     await callback_query.answer("–ö–∞–∫ –º–Ω–æ–≥–æ?",reply_markup=ReplyKeyboardRemove(),)  –í—Å–ø–ª—ã–≤–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã


# –∫–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π
class Form(StatesGroup):
    amount_state = State()
    amount_state_ok = State()
    wait_check = State()
    grow_to_liquid = State()
    liquid_wallet_down = State()
    grow_wallet_up = State()
    liquid_to_grow = State()
    restate_up = State()
    restate_down = State()
    admin_send_ckeck_state = State()
    user_send_ckeck_state = State()
    requisites_entering_state = State()



# START
# @dp.message(Command("start"))
@dp.message(CommandStart(deep_link=True))
async def start_handler( callback_query: types.CallbackQuery, command: CommandObject): #message: Message,
    # user_id = callback_query.message.from_user.id

    try:
        user_name = callback_query.from_user.full_name
        user_id = callback_query.from_user.id
        await bot.send_message(user_id, f"{user_name}, –ø—Ä–∏–≤–µ—Ç! –†–∞–¥ –≤–∏–¥–µ—Ç—å! ü§ó")
    finally:
        pass

# Referrer ID
    try:
        args = command.args
        referrer_id = decode_payload(args)
    except:
        await bot.send_message(user_id, text='‚ùóÔ∏è –ù–µ –º–æ–≥—É —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É ‚ùóÔ∏è')
        referrer_id = 0

    await bot.send_message(user_id, text=f'–í–ù–ò–ú–ê–ù–ò–ï‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è\n–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ\n‚ùóÔ∏è–ù–∏–∫–∞–∫–∏—Ö –≤—ã–ø–ª–∞—Ç –Ω–µ –±—É–¥–µ—Ç –¥–æ —Ä–µ–ª–∏–∑–∞')


 # TRRRRRYYYY DATABASE
    # TRRRRRYYYY DATABASE

    referral_link = await create_start_link(bot,str(user_id), encode=True)
    user = await database.get_or_create_user(user_id, user_name, referral_link, referrer_id)
    if user.bonuses_gotten < 2 :
        try:
            await bot.send_message(referrer_id, text= f"–ü–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ –∑–∞—à–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:\n{user_name}\n–í—ã –ø–æ–ª—É—á–∏—Ç–µ –±–æ–Ω—É—Å üéÅ –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫—Ä–æ–µ—Ç –¥–≤–∞ –±–æ–Ω—É—Å–∞.")
        finally:
            pass 

    await utils.start_guide_stages(user_id)


@dp.message(Command("start"))
async def start_handler( callback_query: types.CallbackQuery): #message: Message,
    user_id = callback_query.from_user.id
-
    user_name = callback_query.from_user.full_name
    await bot.send_message(user_id, f"{user_name}, –ø—Ä–∏–≤–µ—Ç!\n–í—Å–µ–≥–¥–∞ —Ä–∞–¥ –≤–∏–¥–µ—Ç—å! ü§ó")
    await utils.start_guide_stages(user_id)

@dp.message(Command("morning"))
async def start_handler( callback_query: types.CallbackQuery): #message: Message,
    user_id = callback_query.from_user.id
    if user_id == config.levels_guide_id:
    # user_name = callback_query.from_user.full_name
        await bot.send_message(user_id, f'–ò–Ω–∏—Ü–∏–∏—Ä—É—é –ø—Ä–æ—Ç–æ–∫–æ–ª –¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ')
        await utils.good_morning_all()


# # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–∞–Ω–∞–ª
dp.chat_join_request.register(utils.approve_chat_join_request)
 

# –ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –æ—Ç–∫—Ä—ã—Ç—å –±–æ–Ω—É—Å
@dp.callback_query(F.data == "open_bonus")
async def process_open_bonus_button(callback_query: types.CallbackQuery): #message: Message, 
    user_id = callback_query.from_user.id
    user_name = callback_query.from_user.full_name
    # chat_id =  await bot.get_chat()
    user = await database.get_user(user_id)
    bonuses_gotten = user.bonuses_gotten
    bonuses_available = user.bonuses_available
    if bonuses_available > 0:
        if bonuses_gotten-bonuses_available == 1:
            try:
                current_leader_id = user.current_leader_id
                await bot.send_message(current_leader_id, text= f"–í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª: {user_name}(ID: {user_id}) –æ—Ç–∫—Ä—ã–ª –≤—Ç–æ—Ä–æ–π –±–æ–Ω—É—Å.", reply_markup=kb.get_and_open_bonus_button)
            except:
                await bot.send_message(user_id, text="–Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å")   
    await utils.open_bonus(user_id)
    if user.guide_stage == 1:
        await utils.start_guide2(user_id)  
    elif user.guide_stage == 3:
        await utils.start_guide4(user_id)



# –ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–ª—É—á–∞—Ç—å –±–æ–Ω—É—Å –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
@dp.callback_query(F.data == "get_and_open_bonus")
async def process_get_and_open_bonus(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    await bot.edit_message_reply_markup(user_id, message_id=callback_query.message.message_id, reply_markup=None )
    await utils.add_bonus(user_id)
    await bot.send_message(user_id, text="+üéÅ –ë–æ–Ω—É—Å –ø–æ–ª—É—á–µ–Ω!\n–û—Ç–∫—Ä–æ–π—Ç–µ –µ–≥–æ –Ω–∞ –≤–∫–ª–∞–¥–∫–µ –ë–æ–Ω—É—Å—ã")


@dp.callback_query(F.data == "up_level")
async def process_up_level(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    user = await database.get_user(user_id)
    current_leader = await database.get_user(user.current_leader_id)
    if user.level < current_leader.level:
        await utils.up_level(user_id)
    else:
        await bot.send_message(user_id, text="–£ –≤–∞—à–µ–≥–æ –õ–∏–¥–∞ –Ω–µ—Ç next level.\n\n–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –õ–∏–¥–∞\n–í–∫–ª–∞–¥–∫–∞ –ø–∞—Ä—Ç–Ω–µ—Ä—ã\n–ù–∞—Å—Ç–∞–≤–Ω–∏–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã:")
    # await bot.send_message(user_id, '–õ–∏–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω')

@dp.callback_query(F.data == "up_me") 
async def process_up_me(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    await utils.up_me(user_id)


# –í—ã–¥–∞—ë—Ç —Ä–µ–∫–≤–∏–∑–∏—Ç—ã ‚Ññ1 –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è grow_wallet
@dp.callback_query(F.data == "add_grow") 
async def process_add_grow(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    await bot.send_message(user_id, f'–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ grow_wallet:\n\n + {database.gamma[user_id]} —Ä—É–±–ª–µ–π'+ texts.add_grow_text_1, reply_markup=kb.add_balance_ready)

# –ü–µ—Ä–µ–¥–∞—ë—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
@dp.callback_query(F.data == "add_balance_ready")
async def process_add_balance_ready(callback_query: types.CallbackQuery, state: FSMContext) -> None:
    user_id = callback_query.from_user.id
    database.payment_to_check_user_id = user_id
    await bot.edit_message_reply_markup(user_id, message_id=callback_query.message.message_id, reply_markup=None )
    # await utils.add_balance_ready(user_id)
    # database.payment_to_check=database.gamma[user_id]
    await bot.send_message(config.levels_guide_id, text= f":–ó–∞–ø—Ä–∞—à–∏–≤–∞—é—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞. USER (amount;ID)  –ü—Ä–∏—à–ª–∞?")
    await bot.send_message(config.levels_guide_id, text= f"{database.gamma[user_id]};{user_id}", reply_markup=kb.admin_confirm_payment)
    await state.set_state(Form.user_send_ckeck_state)
    await bot.send_message(user_id, f'–ü–ª–∞—Ç–µ–∂: {database.gamma[user_id]} —Ä—É–±–ª–µ–π - –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É —á–µ–∫ üìé‚ÜòÔ∏è')


@dp.message(StateFilter(Form.user_send_ckeck_state))
async def process_user_send_ckeck_state(message: Message, state: FSMContext) -> None:
    await message.send_copy(config.levels_guide_id)
    await state.set_state(None)
    await bot.send_message(message.from_user.id, f'–ü–ª–∞—Ç–µ–∂ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ')


# # –ò–∑–º–µ–Ω–∏—Ç—å —Å—É–º–º—É –ø–ª–∞—Ç–µ–∂–∞ –≤—Ä—É—á–Ω—É—é
@dp.callback_query(F.data == "admin_change_amount_payment")
async def process_confirm_payment_button(callback_query: types.CallbackQuery, state: FSMContext) -> None: #message: Message, callback_query: types.CallbackQuery, 
    text = callback_query.message.text
    splitted = str(text).split(';')
    user_id = splitted[1]
    user_id = int(user_id)
    database.payment_to_check_user_id = user_id
    await state.set_state(Form.amount_state)
    # await bot.edit_message_reply_markup(config.levels_guide_id, message_id=callback_query.message.message_id, reply_markup=None )
    # await bot.send_message(config.levels_guide_id, "–≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É", reply_markup=kb.changed_amount_payment_confirm )
    await callback_query.answer("–ö–∞–∫ –º–Ω–æ–≥–æ?",reply_markup=ReplyKeyboardRemove(),)

# –ø–æ–ø–æ–ª–Ω—è–µ—Ç –ø–æ –∫–Ω–æ–ø–∫–µ  ("–î–µ–Ω—å–≥–∏ –≤–∏–∂—É")
@dp.callback_query(F.data == "admin_confirm_payment")
async def process_confirm_payment_button(callback_query: types.CallbackQuery): #message: Message, callback_query: types.CallbackQuery, 
    text = callback_query.message.text

    splitted = str(text).split(';')
    user_id = splitted[1]
    amount = splitted[0]
    user_id = int(user_id)
    amount = int(amount)

    await utils.add_grow(user_id, amount)
    await bot.edit_message_reply_markup(config.levels_guide_id, message_id=callback_query.message.message_id, reply_markup=None )
    await bot.send_message(user_id, f'–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ grow_wallet:\n + {amount} —Ä—É–±–ª–µ–π' )

# –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—É—é —Å—É–º–º—É?
@dp.message(StateFilter(Form.amount_state))
async def process_amount(message: Message, state: FSMContext) -> None:
    await state.set_state(Form.amount_state_ok)
    await state.update_data(amount=message.text)
    database.payment_to_check_amount = int(message.text)
    await message.answer(f'–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ grow_wallet:\n + {message.text} —Ä—É–±–ª–µ–π\n\nUser ID: {database.payment_to_check_user_id}',reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="Yes"),KeyboardButton(text="No"),]],resize_keyboard=True,),)


# –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—É—é —Å—É–º–º—É - –¥–∞
@dp.message(Form.amount_state_ok, F.text.casefold() == "yes")
async def process_amount_state_ok(message: Message, state: FSMContext) -> None:
    await state.set_state(None)
    user_id = database.payment_to_check_user_id
    amount = database.payment_to_check_amount
    await utils.add_grow(user_id, amount)
    await bot.send_message(user_id, f'–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ grow_wallet:\n + {amount} —Ä—É–±–ª–µ–π' )
    await message.answer("–ì–æ—Ç–æ–≤–æ",reply_markup=ReplyKeyboardRemove())


# –û—Ç–º–µ–Ω–∏—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—É—é —Å—É–º–º—É (–Ω–µ—Ç)
@dp.message(Form.amount_state_ok, F.text.casefold() == "no")
async def process_amount_state_ok(callback_query: types.CallbackQuery, state: FSMContext) -> None:
    await state.set_state(Form.amount_state)
    await callback_query.answer("–ö–∞–∫ –º–Ω–æ–≥–æ?",) # reply_markup=ReplyKeyboardRemove(),



#–¥–≤–∏–∂–µ–Ω–∏—è –ø–æ —Å—á–µ—Ç–∞–º  --------------------------------> –∫–Ω–æ–ø–∫–∏
@dp.callback_query(F.data == "grow_to_liquid")
async def process_grow_to_liquid(callback_query: types.CallbackQuery, state: FSMContext) -> None:
    user_id = callback_query.from_user.id
    user = await database.get_user(user_id)
    await state.set_state(Form.grow_to_liquid)
    # await utils.up_liquid(user_id)
    await bot.send_message(user_id, f'\nGrow -> Liquid\n–ö–æ–º–∏—Å—Å–∏—è –∑–∞ —Å—Ä–æ—á–Ω–æ—Å—Ç—å 1%\n–î–æ—Å—Ç—É–ø–Ω–æ Grow: {user.grow_wallet} \n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:')

@dp.message(StateFilter(Form.grow_to_liquid))
async def process_amount(message: Message, state: FSMContext) -> None:
    user_id = message.from_user.id
    user = await database.get_user(user_id)
    await state.update_data(amount=message.text)
    try:
        amount = int(message.text)
        if amount < 0: amount = -1*amount
        if user.grow_wallet < int(amount):
            await message.answer(f'–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤')
        else:
            await utils.add_grow(user_id, (-1)*int(amount))
            await utils.add_liquid(user_id, (0.99)*int(amount))
            await message.answer(f'\nGrow -> Liquid:\n{amount} —Ä—É–±–ª–µ–π')
    except:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ')
    await state.set_state(None)


@dp.callback_query(F.data == "liquid_wallet_down")
async def process_grow_to_liquid(callback_query: types.CallbackQuery, state: FSMContext) -> None:
    user_id = callback_query.from_user.id
    user = await database.get_user(user_id)
    await state.set_state(Form.liquid_wallet_down)
    # await utils.up_liquid(user_id)
    await bot.send_message(user_id, f'–î–æ—Å—Ç—É–ø–Ω–æ Liquid: {user.liquid_wallet} —Ä—É–±–ª–µ–π\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:')

@dp.message(StateFilter(Form.liquid_wallet_down))
async def process_amount(message: Message, state: FSMContext) -> None:
    user_id = message.from_user.id
    user = await database.get_user(user_id)
    await state.update_data(amount=message.text)
    try:
        amount = int(message.text)
        if amount < 0: amount = -1*amount
        if user.liquid_wallet < amount or user.liquid_wallet <= 0:
            await message.answer(f'–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤')
            await state.set_state(None)
        else:
            database.payout[user_id] = amount
            await state.set_state(Form.requisites_entering_state)
            await bot.send_message(user_id, f'\n–í—ã–≤–æ–¥ –Ω–∞ TON –∫–æ—à–µ–ª–µ–∫ +–ª—É—á—à–∏–π –∫—É—Ä—Å\n–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –≤ —Å–µ—Ç–∏ ‚ùóÔ∏èTON‚ùóÔ∏è\
                           \n‚ùóÔ∏è–í–Ω–∏–º–∞–Ω–∏–µ‚ùóÔ∏è\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –≤ –¥—Ä—É–≥–æ–π —Å–µ—Ç–∏ –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ –ø–æ—Ç–µ—Ä–µ —Å—Ä–µ–¥—Å—Ç–≤‚ùóÔ∏è\n\n–ü–µ—Ä–µ–≤–æ–¥ –ø–æ –°–ë–ü –±–µ–∑ –∫–æ–º–∏—Å—Å–∏–∏\n–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –±–∞–Ω–∫')
    except:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ')
        await state.set_state(None)
    

@dp.message(StateFilter(Form.requisites_entering_state))
async def process_requisites_entering_state(message: Message, state: FSMContext) -> None:
    user_id = message.from_user.id
    user = await database.get_user(user_id)
    await state.update_data(requisites=message.text)
    try:
        requisites = (message.text)
        await bot.send_message(config.levels_guide_id, text= f"–†–µ–∫–≤–∏–∑–∏—Ç—ã: {requisites}")
        await bot.send_message(config.levels_guide_id, text= f"–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥ USER (amount;ID)")
        await bot.send_message(config.levels_guide_id, text= f"{database.payout[user_id]};{user_id}", reply_markup=kb.admin_payout)
        await bot.send_message(user_id, f'–ü–µ—Ä–µ–≤–æ–¥: {database.payout[user_id]} —Ä—É–±–ª–µ–π –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ')
        # await message.answer(f'–í—ã–≤–æ–¥ –∏–∑ liquid_wallet:\n - {database.payout[user_id]} —Ä—É–±–ª–µ–π')
    except:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞–ª–∏–¥–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã')
    await state.set_state(None)

@dp.callback_query(F.data == "admin_payout")
async def process_confirm_payment_button(callback_query: types.CallbackQuery, state: FSMContext) -> None: #message: Message, callback_query: types.CallbackQuery, 
    text = callback_query.message.text
    splitted = str(text).split(';')
    user_id = splitted[1]
    amount = splitted[0]
    user_id = int(user_id)
    database.payment_to_check_user_id = user_id
    amount = int(amount)
    await utils.add_liquid(user_id,(-1)*amount)
    await bot.send_message(config.levels_guide_id, text= f"–ø—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º —á–µ–∫ USER (amount;ID)")
    await bot.edit_message_reply_markup(config.levels_guide_id, message_id=callback_query.message.message_id, reply_markup=None )
    await bot.send_message(user_id, f'–ü–µ—Ä–µ–≤–æ–¥ –∏—Å–ø–æ–ª–Ω–µ–Ω:\n {amount} —Ä—É–±–ª–µ–π' )
    await state.set_state(Form.admin_send_ckeck_state)

@dp.message(StateFilter(Form.admin_send_ckeck_state))
async def process_admin_send_ckeck_state(message: Message, state: FSMContext) -> None:
    await message.send_copy(database.payment_to_check_user_id)
    await state.set_state(None)





    
# @dp.message(StateFilter(Form.requisites_entering_state))
# async def process_requisites_entering_state(message: Message, state: FSMContext) -> None:


    

@dp.callback_query(F.data == "grow_wallet_up")
async def process_grow_to_liquid(callback_query: types.CallbackQuery, state: FSMContext) -> None:
    user_id = callback_query.from_user.id
    user = await database.get_user(user_id)
    await state.set_state(Form.grow_wallet_up)
    # await utils.up_liquid(user_id)
    await bot.send_message(user_id, f'Grow: {user.grow_wallet} \n–ü–æ–ø–æ–ª–Ω–∏—Ç—å —Å—á—ë—Ç. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:')

@dp.message(StateFilter(Form.grow_wallet_up))
async def process_amount(message: Message, state: FSMContext) -> None:
    user_id = message.from_user.id
    await state.update_data(amount=message.text)
    try:
        amount = int(message.text)
        if amount < 0: amount = -1*amount
        await state.set_state(None)
    except:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ')
    database.gamma[user_id] = amount
    
    # await utils.add_grow(user_id, int(amount))
    await message.answer(f'–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ grow_wallet:\n + {amount} —Ä—É–±–ª–µ–π', reply_markup=kb.add_grow)


@dp.callback_query(F.data == "liquid_to_grow")
async def process_grow_to_liquid(callback_query: types.CallbackQuery, state: FSMContext) -> None:
    user_id = callback_query.from_user.id
    user = await database.get_user(user_id)
    await state.set_state(Form.liquid_to_grow)
    # await utils.up_liquid(user_id)
    await bot.send_message(user_id, f'\nLiquid -> Grow\n–î–æ—Å—Ç—É–ø–Ω–æ Liquid: {user.liquid_wallet} \n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:')

@dp.message(StateFilter(Form.liquid_to_grow))
async def process_amount(message: Message, state: FSMContext) -> None:
    user_id = message.from_user.id
    user = await database.get_user(user_id)
    await state.update_data(amount=message.text)
    try:
        amount = int(message.text)
        if amount < 0: amount = -1*amount
        if user.grow_wallet < int(amount):
            await message.answer(f'–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤')
        else:
            await utils.add_liquid(user_id, (-1)*int(amount))
            await utils.add_grow(user_id, int(amount))
            await message.answer(f'\nLiquid -> Grow:\n{amount} —Ä—É–±–ª–µ–π')
    except:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ')
    await state.set_state(None)
    

@dp.callback_query(F.data == "restate_up")
async def process_grow_to_liquid(callback_query: types.CallbackQuery, state: FSMContext) -> None:
    user_id = callback_query.from_user.id
    user = await database.get_user(user_id)
    await state.set_state(Form.restate_up)
    # await utils.up_liquid(user_id)
    await bot.send_message(user_id, f'\nGrow -> Restate\n‚ùóÔ∏èWarning‚ùóÔ∏è\nRestate –Ω–µ–ª—å–∑—è –ø—Ä–æ–¥–∞—Ç—å –Ω–∞ —É—Ä–æ–≤–Ω–µ 0\n–î–æ—Å—Ç—É–ø–Ω–æ Grow: {user.grow_wallet} —Ä—É–±–ª–µ–π\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:')

@dp.message(StateFilter(Form.restate_up))
async def process_amount(message: Message, state: FSMContext) -> None:
    user_id = message.from_user.id
    user = await database.get_user(user_id)
    await state.update_data(amount=message.text)
    try:
        amount = int(message.text)
        if amount < 0: amount = -1*amount
        if amount > user.grow_wallet:
            await message.answer(f'–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤')
        else:
            await utils.add_grow(user_id, int(-1*amount))
            await utils.add_restate(user_id, int(amount))
            await message.answer(f'–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ restate:\n + {amount} —Ä—É–±–ª–µ–π')
    except:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ')
    await state.set_state(None)
    
    
@dp.callback_query(F.data == "restate_down")
async def process_grow_to_liquid(callback_query: types.CallbackQuery, state: FSMContext) -> None:
    user_id = callback_query.from_user.id
    user = await database.get_user(user_id)
    await state.set_state(Form.restate_down)

    # await utils.up_liquid(user_id)
    await bot.send_message(user_id, f'Restate -> Grow\n–ö–æ–º–º–∏—Å—Å–∏—è 10%\n–î–æ—Å—Ç—É–ø–Ω–æ: {user.restate} —Ä—É–±–ª–µ–π\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:')

@dp.message(StateFilter(Form.restate_down))
async def process_amount(message: Message, state: FSMContext) -> None:
    user_id = message.from_user.id
    user = await database.get_user(user_id)
    if user.level < 1:
        await bot.send_message(user_id, '–ø—Ä–æ–¥–∞–∂–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω–∞ —Å —É—Ä–æ–≤–Ω—è 1')
    else:
        await state.update_data(amount=message.text)
        try:
            amount = int(message.text)
            if amount < 0: amount = -1*amount
            if user.restate < int(message.text):
                await message.answer(f'–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤')
            else:
                await utils.add_restate(user_id, (-1)*int(amount))
                await utils.add_grow(user_id, (0.9)*int(amount))
                await message.answer(f'–í—ã–≤–æ–¥ –∏–∑ restate:\n + {amount} —Ä—É–±–ª–µ–π')
        except:
            await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ')
        
    await state.set_state(None)

    
@dp.message(F.photo)
async def photo_handler(message: Message):
    await bot.send_message(message.from_user.id, f'–≤–∏–∂—É —Ñ–æ—Ç–æ')
    photo_data = message.photo[-1]
    await bot.send_message(message.from_user.id, f'photo_data: {photo_data}')



@dp.callback_query(F.data == "check_subscribe_button")
async def check_subs(callback_query: types.CallbackQuery):
        user_id = callback_query.from_user.id
        await utils.start_guide3(user_id)    
    
@dp.callback_query(F.data == "no_subscribtion")
async def check_subs(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    user = await database.get_user(user_id)
    if user.guide_stage == 2:
        await utils.start_guide3_nosub(user_id) 

@dp.callback_query(F.data == "check_done_button")
async def check_done(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    user = await database.get_user(user_id)
    if user.guide_stage == 3:
        await utils.start_guide3_1(user_id)


# SWITCH TABS

switch_tabs_data =      ["menu"   , "profile"   , "resources"   , "level"      , "balance"    , "partners"    , "bonuses"   , "info"     ] 

switch_tabs_text=      ["–ú–µ–Ω—é"   , "–ü—Ä–æ—Ñ–∏–ª—å"   , "–†–µ—Å—É—Ä—Å—ã"     , "–£—Ä–æ–≤–µ–Ω—å"    , "–ë–∞–ª–∞–Ω—Å"     , "–ü–∞—Ä—Ç–Ω–µ—Ä—ã"    , "–ë–æ–Ω—É—Å—ã"    , "–ò–Ω—Ñ–æ"     ]
switch_tabs_emoji_text=["üìç\n–ú–µ–Ω—é", "ü™™\n–ü—Ä–æ—Ñ–∏–ª—å", "üîó\n–†–µ—Å—É—Ä—Å—ã", "üîº\n–£—Ä–æ–≤–µ–Ω—å", "üí≥\n–ë–∞–ª–∞–Ω—Å", "üíé\n–ü–∞—Ä—Ç–Ω–µ—Ä—ã", "üéÅ\n–ë–æ–Ω—É—Å—ã", "üîé\n–ò–Ω—Ñ–æ"]
switch_tabs_commands = ["/menu"  , "/profile"  , "/resources"    , "/level"     , "/balance"   , "/partners"   , "/bonuses"    , "/info"    ]

@dp.callback_query(F.data)
async def swith_menu_tubs(callback_query: types.CallbackQuery):
    data = callback_query.data

    if data in switch_tabs_data:

        await utils.switch_tubs(data, user_id=callback_query.from_user.id)
        # await bot.answer_callback_query(callback_query.from_user.id)

       
@dp.message(F.text)  
async def swith_menu_tubs(msg: Message):
    if msg.text in switch_tabs_emoji_text:
        index = switch_tabs_emoji_text.index(msg.text)

        data = switch_tabs_data[index]
        await utils.switch_tubs(data, user_id=msg.from_user.id)
    elif msg.text in switch_tabs_text:
        index = switch_tabs_text.index(msg.text)
        data = switch_tabs_data[index]
        await utils.switch_tubs(data, user_id=msg.from_user.id)
    elif msg.text in switch_tabs_commands:
        index = switch_tabs_commands.index(msg.text)
        data = switch_tabs_data[index]
        await utils.switch_tubs(data, user_id=msg.from_user.id)
    # await bot.answer_callback_query(callback_query.id)
        


