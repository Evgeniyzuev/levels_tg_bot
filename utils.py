import random
import pickle
import database
import utils
import texts
import kb
import asyncio
from datetime import datetime, timedelta

from aiogram import types 
# from aiogram import Bot, F, Router, flags
# from aiogram.fsm.context import FSMContext
# from aiogram.types import Message, InputFile
# from aiogram.filters import Command
# from aiogram.enums.parse_mode import ParseMode
# from database import SessionLocal, User

from misc import bot
db = database.SessionLocal()



def get_user(user_id):
    if user_id not in database.users:
    # if not db.users(user_id):
         return False
    else:
          return database.users[user_id]
    
def add_user(user_id, user_name, referral_link, referrer_id):
    if user_id not in database.users:
        time_now = datetime.now() + timedelta(hours=0, minutes=0)
   
        database.users[user_id] = {"user_id":user_id, "user_name": user_name, "time_start": time_now, "level":  0, "real_estate": 0, "grow_wallet": 0, "liquid_wallet": 0, "turnover": 0,\
            "sales": 0, "bonuses_available": 0, "bonuses_gotten": 0, "guide_stage": 0, "current_leader_id": referrer_id, "referrers": [referrer_id], "referrals": [], "referral_link": referral_link, "bonus_cd": time_now}


def get_balance_sum(user_id):
    user = user = get_user(user_id)
    balance_sum = user["real_estate"] + user["grow_wallet"] + user["liquid_wallet"]
    return balance_sum

# BONUS
def add_bonus(user_id):
    user = get_user(user_id)
    user["bonuses_gotten"] += 1
    user["bonuses_available"] += 1

def get_bonuses_available(user_id):
    user = get_user(user_id)
    return user["bonuses_available"]

def get_bonuses_gotten(user_id):
    user = get_user(user_id)
    return user["bonuses_gotten"]

async def open_bonus(user_id):
    user = get_user(user_id)
    if user["bonuses_available"] >= 1:
        user["bonuses_available"] -= 1
        bonus_size = float(random.randint(0, 251))
        bonus_size = bonus_size / 100
        bonus_size = bonus_size ** 4
        bonus_size = bonus_size + 10.31
        user["real_estate"] += bonus_size
        user["turnover"] += bonus_size
        bonuses_gotten = utils.get_bonuses_gotten(user_id)
        text1 = 'üîº –ü–æ–ª—É—á–µ–Ω–æ –±–æ–Ω—É—Å–æ–≤:     ' + f"{bonuses_gotten}"
        text2 = f"\nüéÅ –ë–æ–Ω—É—Å:         " + '%.2f' %(bonus_size) + " —Ä—É–±–ª–µ–π\n" 
        text3 = "üí≥ –ë–∞–ª–∞–Ω—Å:      " + ( '%.2f' %(utils.get_balance_sum(user_id=user_id))) + " —Ä—É–±–ª–µ–π"
        await bot.send_photo(user_id, photo=types.FSInputFile('D:\Git\levels_tg_bot\levels_tg_bot\BASE_MEDIA\pics\\bonus_open.jpg'), caption=text1 + text2 + text3)
    else:
        await bot.send_video(user_id, video=types.FSInputFile('D:\Git\levels_tg_bot\levels_tg_bot\BASE_MEDIA\\videos\\travolta.gif.mp4'), caption="\
        –ó–¥–µ—Å—å –ø–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç. –ö—É–¥–∞ –≤—Å—ë –¥–µ–ª–æ—Å—å? ü§î \n\n–ë–æ–Ω—É—Å—ã —Ä–∞–∑—ã–≥—Ä—ã–≤–∞—é—Ç—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å! \n–ú—ã –æ—Ç–ø—Ä–∞–≤–∏–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –ø—Ä–∏–¥–µ—Ç –±–æ–Ω—É—Å.\
                            \n\n–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤–∫–ª—é—á–∏—Ç—å –≤—Å–ø–ª—ã–≤–∞—é—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±–æ—Ç–∞üîî –ß—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.\n\n –ù–∞–∂–∏–º–∞–π—Ç–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è\n –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å –∑–∞ –∫–∞–∂–¥–æ–≥–æ –Ω–æ–≤–æ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞! üéÅ") 


# START Guide Stages
async def start_guide_stages(user_id):

    if utils.get_user(user_id)["guide_stage"] == 0:
        await utils.start_guide1(user_id)

    elif utils.get_user(user_id)["guide_stage"] == 1:
        await utils.start_guide2(user_id)

    elif utils.get_user(user_id)["guide_stage"] == 2:
        await utils.start_guide3(user_id)

    elif utils.get_user(user_id)["guide_stage"] == 3:
        await utils.start_guide4(user_id)

    elif utils.get_user(user_id)["guide_stage"] >= 4:
            await utils.main_menu(user_id)


async def get_balance(user_id):
    if utils.get_user(user_id) == False:
         await bot.send_message(user_id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ –±–æ—Ç–∞")
    else:     
        user = get_user(user_id)
        text0 = "üí≥ –ë–∞–ª–∞–Ω—Å:                      " + ( '%.2f' %(utils.get_balance_sum(user_id=user_id))) + " —Ä—É–±–ª–µ–π"
        text1 = "\n\n1Ô∏è‚É£ Restate(25%):             " + '%.2f' %(user["real_estate"]) + ' —Ä—É–±–ª–µ–π'
        text2 = "\n2Ô∏è‚É£ GROW(20%):               " + '%.2f' %(user["grow_wallet"]) + ' —Ä—É–±–ª–µ–π'
        text3 = "\n3Ô∏è‚É£ Liquid(0%):                  " + '%.2f' %(user["liquid_wallet"]) + ' —Ä—É–±–ª–µ–π'
        balance = text0 + text1 + text2 + text3 + texts.accounts_about_text
        await bot.send_photo(user_id, photo=types.FSInputFile('D:\Git\levels_tg_bot\levels_tg_bot\BASE_MEDIA\pics\\real_estate_trees_lake.jpg'), caption=balance, reply_markup=kb.balance_markup )

# TABS –≤–∫–ª–∞–¥–∫–∏
#  –í–∫–ª–∞–¥–∫–∏ –ú–ï–ù–Æ
async def main_menu(user_id):
     await bot.send_message(user_id, " üìç    –ú–µ–Ω—é    ", reply_markup=kb.menu_buttons_reply_markup)
    #  await bot.send_message(user_id, " –í—Å–µ  –≤–∫–ª–∞–¥–∫–∏  –≥–ª–∞–≤–Ω–æ–≥–æ  –º–µ–Ω—é  ", reply_markup=kb.menu_markup)

async def profile_tub(user_id):
    user = get_user(user_id)
    level = user["level"]
    turnover = user["turnover"]
    sales = user["sales"]
    referral_link = user["referral_link"]
    text = "ü™™ –ü—Ä–æ—Ñ–∏–ª—å" + f"\n–í–∞—à —É—Ä–æ–≤–µ–Ω—å: {level}"
    text1 = "\n\n–í–µ—Å—å –æ–±–æ—Ä–æ—Ç:   " + '%.2f' %(turnover) + ' —Ä—É–±–ª–µ–π'
    text2 = f"\n–í—Å–µ–≥–æ –ø—Ä–æ–¥–∞–∂:    {sales}"
    text3 = f"\n\n–í–∞—à–∞ –ª–∏—á–Ω–∞—è —Ä–µ—Ñ —Å—Å—ã–ª–∫–∞: {referral_link}"
    await bot.send_message(user_id, text + text1 + text2, reply_markup=kb.profile_markup)

async def level_tub(user_id):
    level = utils.get_user(user_id)["level"]
    await bot.send_message(user_id, "üîº –£—Ä–æ–≤–µ–Ω—å" + f"\n–í–∞—à —É—Ä–æ–≤–µ–Ω—å: {level}", reply_markup=kb.resources_markup)
async def balance_tub(user_id):
    await get_balance(user_id)

async def partners_tub(user_id):
    referrals = utils.get_user(user_id)["referrals"]
    await bot.send_message(user_id, "üíé –ü–∞—Ä—Ç–Ω–µ—Ä—ã"+ f"\n–í–∞—à–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã: {referrals}", reply_markup=kb.partners_markup)

async def bonuses_tub(user_id):
    if utils.get_user(user_id) == False:
        await bot.send_message(user_id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ –±–æ—Ç–∞")
    else:   
        referral_link = utils.get_user(user_id)["referral_link"]
        text2 = f"\n\n–í–∞—à–∞ –ª–∏—á–Ω–∞—è —Ä–µ—Ñ —Å—Å—ã–ª–∫–∞:\n{referral_link}"
        await bot.send_message(user_id, texts.bonuses_tub_text1 + text2 + texts.bonuses_tub_text2 + f"{utils.get_bonuses_gotten(user_id)}"\
                                + "\n–î–æ—Å—Ç—É–ø–Ω–æ –±–æ–Ω—É—Å–æ–≤: " + f"{utils.get_bonuses_available(user_id)}", reply_markup=kb.bonuses_markup)
        
async def resources_tub(user_id):
    resurses_text = '\n\n–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª: https://t.me/Levels_up'
    await bot.send_message(user_id, "üîó –†–µ—Å—É—Ä—Å—ã" + resurses_text, reply_markup=kb.resources_markup)

async def info_tub(user_id):
    await bot.send_message(user_id, "üîé –ò–Ω—Ñ–æ"+ texts.info_text, reply_markup=kb.info_markup)

async def switch_tubs(code , user_id):
    if code == "menu":
        await utils.main_menu(user_id)
    elif code == "profile":
        await utils.profile_tub(user_id)
    elif code == "resources":
        await utils.resources_tub(user_id)
    elif code == "level":
        await utils.level_tub(user_id)
    elif code == "balance":
        await utils.balance_tub(user_id)
    elif code == "partners":
        await utils.partners_tub(user_id)
    elif code == "bonuses":
        await utils.bonuses_tub(user_id)
    elif code == "info":
        await utils.info_tub(user_id)
# Guide
# –ü—Ä–æ –£—Ä–æ–≤–Ω–∏. –î–∞–µ–º –ø–µ—Ä–≤—ã–π –±–æ–Ω—É—Å. –û—Ç–∫—Ä—ã–≤–∞–π—Ç–µ.
async def start_guide1(user_id):
    await bot.send_photo(user_id, photo=types.FSInputFile('D:\Git\levels_tg_bot\levels_tg_bot\BASE_MEDIA\pics\choose_your_level2.jpg.jpg'),caption=texts.start_guide1_text)
    await asyncio.sleep(1)
    utils.get_user(user_id)["guide_stage"] = 1
    if utils.get_user(user_id)["bonuses_gotten"] == 0:
                utils.add_bonus(user_id)
    elif utils.get_user(user_id)["bonuses_gotten"] >= 1:
            await bot.send_message(user_id, '–•–º...\n–ö–∞–∂–µ—Ç—Å—è, –≤—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ –ø–µ—Ä–≤—ã–π –±–æ–Ω—É—Å')
    
    await bot.send_message(user_id,"–ù–∞—á–Ω–µ–º —Å –Ω–µ–±–æ–ª—å—à–æ–≥–æ –±–æ–Ω—É—Å–∞", reply_markup=kb.bonus_button)

# –û—Ç–∫—Ä—ã–≤–∞–º –±–æ–Ω—É—Å 1. –ü—Ä–æ –±–æ–Ω—É—Å—ã. –î–ª—è –≤—Ç–æ—Ä–æ–≥–æ –±–æ–Ω—É—Å–∞ - –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª
async def start_guide2(user_id):
    # await utils.open_bonus(user_id)
    await asyncio.sleep(1)
    await bot.send_message(user_id, "–°–Ω–∞—á–∞–ª–∞ –±–æ–Ω—É—Å—ã –º–æ–≥—É—Ç —Å–æ–¥–µ–∂–∞—Ç—å\n–æ—Ç 10 –¥–æ 50 —Ä—É–±–ª–µ–π.\n\n–î–∞–ª—å—à–µ - –±–æ–ª—å—à–µ üîº")
    await asyncio.sleep(1)
    await bot.send_message(user_id, "–ú–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –±–æ–Ω—É—Å –∑–∞ 2 –ø—Ä–æ—Å—Ç—ã—Ö –¥–µ–π—Å—Ç–≤–∏—è:")
    await asyncio.sleep(1)
    await bot.send_message(user_id, "1. –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª", reply_markup=kb.subscribe_buttons)
    utils.get_user(user_id)["guide_stage"] = 2

# –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π –≤ –¢–ì.
async def start_guide3(user_id):  
    #  if utils.get_user(callback_query.from_user.id,)["guide_stage"] == 2:
        user_channel_status = await bot.get_chat_member(chat_id='-1001973511610', user_id=user_id)
        if user_channel_status != 'left':
            if user_channel_status.status == "creator" or user_channel_status.status == "member" or user_channel_status.status == 'ChatMemberMember':
                utils.get_user(user_id)["guide_stage"] = 3
                if utils.get_user(user_id)["bonuses_gotten"] == 1:
                    utils.add_bonus(user_id)
                elif utils.get_user(user_id)["bonuses_gotten"] >= 2:
                    await bot.send_message(user_id, '–•–º...\n–ö–∞–∂–µ—Ç—Å—è, –≤—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ 2 –±–æ–Ω—É—Å–∞')
                await bot.send_message(user_id, '–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É')
                await bot.send_message(user_id, '2. –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –°–í–û–ï–ô —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π –≤ –¢–ì.')
                await asyncio.sleep(2)
                referral_link = utils.get_user(user_id)["referral_link"]
                await bot.send_photo(user_id, photo=types.FSInputFile('D:\Git\levels_tg_bot\levels_tg_bot\BASE_MEDIA\pics\\bonus_open.jpg'),\
                            caption= texts.start_guide3_text_1 +f"{referral_link}" +"\nüéÅ –ë–æ–Ω—É—Å –∑–¥–µ—Å—å‚¨ÜÔ∏è   üîÅ–†–ï–ü–û–°–¢ —Ç—É—Ç‚û°Ô∏è")
                await asyncio.sleep(2)
                await bot.send_message(user_id, texts.start_guide3_text_2, reply_markup=kb.check_done_button)
            else:
                await bot.send_message(user_id, '–ù–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏. –ú–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –ø–æ—Ç–µ—Ä—è—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –±–æ–Ω—É—Å üò±', reply_markup=kb.subscribe_buttons2)

# –ë–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª –Ω–µ—Ç –±–æ–Ω—É—Å
async def start_guide3_nosub(user_id):

    utils.get_user(user_id)["guide_stage"] = 3
    if utils.get_user(user_id,)["bonuses_gotten"] == 1:
                    utils.get_user(user_id,)["bonuses_gotten"] = 2
    await bot.send_message(user_id, '‚òπÔ∏è')
    await bot.send_message(user_id, '2. –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π –≤ –¢–ì.')
    await asyncio.sleep(2)
    referral_link = utils.get_user(user_id)["referral_link"]
    await bot.send_photo(user_id, photo=types.FSInputFile('D:\Git\levels_tg_bot\levels_tg_bot\BASE_MEDIA\pics\\bonus_open.jpg'),\
                caption= texts.start_guide3_text_1 + f"{referral_link}" + "\nüéÅ –ë–æ–Ω—É—Å –∑–¥–µ—Å—å‚¨ÜÔ∏è   üîÅ–†–ï–ü–û–°–¢ —Ç—É—Ç‚û°Ô∏è")
    await asyncio.sleep(2)
    await bot.send_message(user_id, texts.start_guide3_text_2, reply_markup=kb.check_done_button)

async def start_guide3_1(user_id):
    await bot.send_message(user_id, 'OK')
    await asyncio.sleep(1)
    await bot.send_message(user_id, '–ê –≤–æ—Ç –∏ –±–æ–Ω—É—Å!', reply_markup=kb.bonus_button)


async def start_guide4(user_id):
    utils.get_user(user_id)["guide_stage"] = 4
    # await utils.open_bonus(user_id)
    await asyncio.sleep(1)
    await bot.send_message(user_id, texts.start_guide4_text, disable_web_page_preview=True)
    await asyncio.sleep(2)
    await bot.send_message(user_id, texts.start_guide4_text_2, reply_markup=kb.menu_button_markup)



