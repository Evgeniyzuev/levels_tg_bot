import random
import asyncio
import math 
import config

import database
import utils
import texts
import kb
from misc import bot
from database import User


from aiogram import types


# BONUS
async def add_bonus(user_id):
    try:
        with database.Session() as session:
            user = session.query(User).filter(User.user_id == user_id).first()
            user.bonuses_gotten += 1
            user.bonuses_available += 1
            session.commit()
    except:
         await bot.send_message(user_id, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ')

         
async def up_level(user_id):
    user = await database.get_user(user_id)  
    next_level = (user.level)+1
    restate_require = database.ubicoin * (2 ** (next_level))
    lead_grace = database.ubicoin * (2 ** (next_level))
    balance = user.restate + user.grow_wallet + user.liquid_wallet
    # delta = (lead_grace + restate_require) - balance
    # database.gamma[user_id] = lead_grace - (user.grow_wallet+user.liquid_wallet)
    if (restate_require-user.restate) > 0:
        database.gamma[user_id] = lead_grace-(user.grow_wallet + user.liquid_wallet-(restate_require-user.restate)) 
    else:  
         database.gamma[user_id] = lead_grace-(user.grow_wallet + user.liquid_wallet)

    if database.gamma[user_id] > 0:
        database.gamma[user_id] = database.gamma[user_id]/100
        xxx = database.gamma[user_id]
        # await bot.send_message(user_id, f'xxx:{xxx} math.ceil: {math.ceil(xxx)}')
        database.gamma[user_id] = math.ceil(xxx)
        # await bot.send_message(user_id, f'math.ceil: {database.gamma[user_id]}')
        database.gamma[user_id] = database.gamma[user_id]*100

        await bot.send_message(user_id, f'–°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å: {next_level}\n\nRestate: {restate_require} —Ä—É–±\n–°–ø–∞—Å–∏–±–æ –õ–∏–¥—É: {lead_grace} —Ä—É–±\
                               \n\n–ë–∞–ª–∞–Ω—Å: '+ '%.2f' %(balance) + " —Ä—É–±"+ f'\n\n–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –Ω–∞ {database.gamma[user_id]} —Ä—É–±', reply_markup=kb.add_grow)
    else:
        await bot.send_message(user_id, f'–°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å: {next_level}\n\nRestate: {restate_require} —Ä—É–±\n–°–ø–∞—Å–∏–±–æ –õ–∏–¥—É: {lead_grace} —Ä—É–±\
                               \n\n–ë–∞–ª–∞–Ω—Å: '+ '%.2f' %(balance) + " —Ä—É–±", reply_markup=kb.up_me)




# # TODO –°–æ–∑–¥–∞—Ç—å –æ—á–µ—Ä–µ–¥—å –ø–ª–∞—Ç–µ–∂–µ–π —é–∑–µ—Ä–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. –¢–æ–≥–¥–∞ —ç—Ç–æ –Ω–µ –Ω–∞–¥–æ:(–ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —à–∞–≥: if  database.payment_to_check[user_id] != 0:)
# async def add_balance_ready(user_id):
#         database.payment_to_check=database.gamma[user_id]
#         await bot.send_message(config.levels_guide_id, text= f":–ó–∞–ø—Ä–∞—à–∏–≤–∞—é—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞. USER (amount;ID)  –ü—Ä–∏—à–ª–∞?")
#         await bot.send_message(config.levels_guide_id, text= f"{database.gamma[user_id]};{user_id}", reply_markup=kb.admin_confirm_payment)
#         await bot.send_message(user_id, f'–ü–ª–∞—Ç–µ–∂: {database.gamma[user_id]} —Ä—É–±–ª–µ–π - –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É —á–µ–∫ üìé‚ÜòÔ∏è') #\n–∏–ª–∏ –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ –∏ –ø–µ—Ä–≤—É—é –±—É–∫–≤—É —Ñ–∞–º–∏–ª–∏–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Ü–∏—Ñ—Ä—ã –∫–∞—Ä—Ç—ã , –Ω–∞–ø—Ä–∏–º–µ—Ä: (–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á –ò. 7728)

    

async def up_me(user_id):
    # with database.Session() as session:
        user = await database.get_user(user_id)
        current_leader_id = user.current_leader_id
        current_leader = await database.get_user(current_leader_id)
        restate_require = database.ubicoin * (2 ** (user.level+1))
        lead_grace = database.ubicoin * (2 ** (user.level+1)) 
        if (restate_require-user.restate) > 0:
          database.gamma[user_id] = lead_grace-(user.grow_wallet + user.liquid_wallet-(restate_require-user.restate)) 
        else:  
            database.gamma[user_id] = lead_grace-(user.grow_wallet + user.liquid_wallet)
        if database.gamma[user_id] > 0:
            await bot.send_message(user_id,  f'–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤: {database.gamma[user_id]} —Ä—É–±–ª–µ–π')
        else:
            if restate_require > user.restate:
                # user.grow_wallet-=(restate_require-user.restate)
                await add_grow(user_id, -restate_require+user.restate)
                # user.restate=restate_require
                await add_restate(user_id, restate_require-user.restate)
            # user.grow_wallet-=lead_grace 
            await add_grow(user_id, -lead_grace)
            # user.turnover+=lead_grace
            await add_turnover(user_id, lead_grace)               
            # user.level += 1
            await add_level(user_id)
            await add_sales(current_leader_id)
            # current_leader.grow_wallet+=lead_grace
            await add_grow(current_leader_id, lead_grace)
            # current_leader.turnover+=lead_grace
            await add_turnover(current_leader_id, lead_grace)
            await if_grow_wallet_is_negative(user_id)
                    
            sum = current_leader.restate + current_leader.grow_wallet + current_leader.liquid_wallet
            text0 = "\nüí≥ –ë–∞–ª–∞–Ω—Å: " + ( '%.2f' %(sum)) + " —Ä—É–±–ª–µ–π" 

            await bot.send_message(user_id, f'–£—Ä–æ–≤–µ–Ω—å –ø–æ–≤—ã—à–µ–Ω üîº: {user.level+1}\n')
            await bot.send_message(current_leader_id, f'–í—Ö–æ–¥—è—â–∏–π: +{lead_grace} —Ä—É–±–ª–µ–π'+ text0 +f'\n\n–í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª {user.user_name}: {(user.level)} üîº {user.level+1}\
                                \n\n*–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –í–∞—à–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã –º–æ–≥—É—Ç –¥–æ—Å—Ç–∏—á—å –≤–∞—à–µ–≥–æ —É—Ä–æ–≤–Ω—è. –¢–æ–≥–¥–∞ –æ–Ω–∏ –Ω–µ —Å–º–æ–≥—É—Ç –≤–∑—è—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å —É –≤–∞—Å. –ò –æ–Ω–∏ —É–π–¥—É—Ç –∫ –¥—Ä—É–≥–æ–º—É –õ–∏–¥—É')


async def get_bonuses_available(user_id):
    user = await database.get_user(user_id)
    # bonuses_available = user.bonuses_available
    return user.bonuses_available

async def get_bonuses_gotten(user_id):
    user = await database.get_user(user_id) 
    return user.bonuses_gotten


async def open_bonus(user_id):
    with database.Session() as session:
        user = session.query(User).filter(User.user_id == user_id).first()
        text4 = "\n–ó–¥–µ—Å—å –ø–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç. –ö—É–¥–∞ –≤—Å—ë –¥–µ–ª–æ—Å—å? ü§î \n\n–ë–æ–Ω—É—Å—ã —Ä–∞–∑—ã–≥—Ä—ã–≤–∞—é—Ç—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å! \n–ú—ã –æ—Ç–ø—Ä–∞–≤–∏–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –ø—Ä–∏–¥–µ—Ç –±–æ–Ω—É—Å.\
                \n\n–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤–∫–ª—é—á–∏—Ç—å –≤—Å–ø–ª—ã–≤–∞—é—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±–æ—Ç–∞üîî –ß—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.\n\n –ù–∞–∂–∏–º–∞–π—Ç–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è\n –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å –∑–∞ –∫–∞–∂–¥–æ–≥–æ –Ω–æ–≤–æ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞! üéÅ"
          
        if user.bonuses_available >= 1:
            user.bonuses_available-= 1
            bonus_size = float(random.randint(0, 333))
            bonus_size = bonus_size / 100
            bonus_size = bonus_size ** 3
            bonus_size = bonus_size + 10.074 + (random.randint(0, 300))/100
            await add_restate(user_id, bonus_size)
            await add_turnover(user_id, bonus_size)

            session.commit()
            bonuses_gotten = user.bonuses_gotten
            balance_sum = user.restate+user.grow_wallet+user.liquid_wallet
            text1 = '\nüîº –ü–æ–ª—É—á–µ–Ω–æ –±–æ–Ω—É—Å–æ–≤:     ' + f"{bonuses_gotten}"
            text2 = f"\nüéÅ –ë–æ–Ω—É—Å:         " + '%.2f' %(bonus_size) + " —Ä—É–±–ª–µ–π" 
            text3 = "\nüí≥ –ë–∞–ª–∞–Ω—Å:      " + ( '%.2f' %(balance_sum)) + " —Ä—É–±–ª–µ–π"
            try:
                await bot.send_photo(user_id, photo=database.photo_ids_test['bonus_open'], caption=text1 + text2 + text3)
            except:
                await bot.send_message(user_id,'–ó–¥–µ—Å—å –º–æ–≥–ª–æ –±—ã—Ç—å –Ω–∞—à–µ —Ñ–æ—Ç–æ üòÑ\n' + text1 + text2 + text3)
        else:
            try:
                await bot.send_photo(user_id, photo=database.photo_ids_test['travolta'], caption=text4) 
            except:
                await bot.send_message(user_id,'–ó–¥–µ—Å—å –º–æ–≥–ª–æ –±—ã—Ç—å –Ω–∞—à–µ —Ñ–æ—Ç–æ üòÑ\n' + text4)
            

async def add_restate(user_id, amount):
    with database.Session() as session:
        user = session.query(User).filter(User.user_id == user_id).first()
        user.restate += amount
        session.commit()

async def add_grow(user_id, amount):
    with database.Session() as session:
        user = session.query(User).filter(User.user_id == user_id).first()
        user.grow_wallet += amount
        session.commit()

async def add_liquid(user_id, amount):
    with database.Session() as session:
        user = session.query(User).filter(User.user_id == user_id).first()
        user.liquid_wallet += amount
        session.commit()

async def add_turnover(user_id, amount):
    with database.Session() as session:
        user = session.query(User).filter(User.user_id == user_id).first()
        user.turnover += amount
        session.commit()

async def add_level(user_id):
    with database.Session() as session:
        user = session.query(User).filter(User.user_id == user_id).first()
        user.level += 1
        session.commit()

async def add_sales(user_id):
    with database.Session() as session:
        user = session.query(User).filter(User.user_id == user_id).first()
        user.sales += 1
        session.commit()

async def if_grow_wallet_is_negative(user_id):
    with database.Session() as session:
        user = session.query(User).filter(User.user_id == user_id).first()
        if user.grow_wallet < 0:
            # user.liquid_wallet+=user.grow_wallet
            await add_liquid(user_id, user.grow_wallet)
            # user.grow_wallet=0
            await add_grow(user_id, -user.grow_wallet)


# START Guide Stages
async def start_guide_stages(user_id):
    user = await database.get_user(user_id)

    if user.guide_stage  == 0:
        await utils.start_guide1(user_id)

    elif user.guide_stage  == 1:
        await utils.start_guide2(user_id)

    elif user.guide_stage == 2:
        await utils.start_guide3(user_id)

    elif user.guide_stage  == 3:
        await utils.start_guide4(user_id)

    elif user.guide_stage  >= 4:
            await utils.main_menu(user_id)


async def get_balance(user_id):
    # if await database.get_user(user_id) == False:
    #      await bot.send_message(user_id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ –±–æ—Ç–∞")
    # else:     
        user = await database.get_user(user_id)

        text1 = "\n\nüè° Restate(25%):  " + '%.2f' %(user.restate) + ' —Ä—É–±–ª–µ–π'
        text2 =   "\nüå± Grow(20%):      " + '%.2f' %(user.grow_wallet) + ' —Ä—É–±–ª–µ–π'
        text3 =   "\nüíß Liquid(0%):       " + '%.2f' %(user.liquid_wallet) + ' —Ä—É–±–ª–µ–π'
        sum = user.restate + user.grow_wallet + user.liquid_wallet
        text0 = "üí≥ –ë–∞–ª–∞–Ω—Å:            " + ( '%.2f' %(sum)) + " —Ä—É–±–ª–µ–π"
        balance_text = text0 + text1 + text2 + text3 + texts.accounts_about_text
        return balance_text
        
      
# TABS –≤–∫–ª–∞–¥–∫–∏
#  –í–∫–ª–∞–¥–∫–∏ –ú–ï–ù–Æ
async def main_menu(user_id):
     await bot.send_message(user_id, "üî¥ –ö–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É üî¢ ‚¨áÔ∏è", reply_markup=kb.menu_buttons_reply_markup)
    #  await bot.send_message(user_id, " –í—Å–µ  –≤–∫–ª–∞–¥–∫–∏  –≥–ª–∞–≤–Ω–æ–≥–æ  –º–µ–Ω—é  ", reply_markup=kb.menu_markup)

async def profile_tub(user_id):
    user_info_text = "ü™™ –ü—Ä–æ—Ñ–∏–ª—å\n\n" + await database.user_info( user_id)
    await bot.send_message(user_id, user_info_text, disable_web_page_preview=True, reply_markup=kb.profile_markup)

async def level_tub(user_id):
    user = await database.get_user(user_id)
    level = user.level
    leader_id = user.current_leader_id
    try:
        current_leader = await database.get_user(leader_id)
        leader_name = current_leader.user_name
        leader_level=current_leader.level
        await bot.send_message(user_id, f"\n–í–∞—à —É—Ä–æ–≤–µ–Ω—å: {level}"+f'\n\n–í–∞—à –õ–∏–¥ —Å–µ–π—á–∞—Å:\n{leader_name}\nLevel: {leader_level}', reply_markup=kb.level_markup)
    except:
        await bot.send_message(user_id, f"\n–í–∞—à —É—Ä–æ–≤–µ–Ω—å: {level}", reply_markup=kb.level_markup)

async def balance_tub(user_id):
    balance_text = await get_balance(user_id)
    try:
        await bot.send_photo(user_id, photo=database.photo_ids_test['restate_grow_liquid'], caption=f'{balance_text}', reply_markup=kb.balance_control_markup)
    except:
        await bot.send_message(user_id, f'{balance_text}', reply_markup=kb.balance_control_markup)


async def partners_tub(user_id):
    user = await database.get_user(user_id)
    referrals = user.referrals 
    leader_id = user.current_leader_id
    try:
        current_leader = await database.get_user(leader_id)
        leader_name = current_leader.user_name
        leader_level=current_leader.level
        await bot.send_message(user_id, "üíé –ü–∞—Ä—Ç–Ω–µ—Ä—ã" +f'\n\n–í–∞—à –õ–∏–¥ —Å–µ–π—á–∞—Å:\n{leader_name}\nLevel: {leader_level} ' 
        + "\n\n–ù–∞—Å—Ç–∞–≤–Ω–∏–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã: " + f"\n\n–í–∞—à–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã: {referrals}", reply_markup=kb.partners_markup)
    except:
        await bot.send_message(user_id, "üíé –ü–∞—Ä—Ç–Ω–µ—Ä—ã" +f'\n\n–í–∞—à –õ–∏–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω' 
            + f"\n\n\n–í–∞—à–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã: {referrals}", reply_markup=kb.partners_markup)

async def bonuses_tub(user_id):
    try:
        user = await database.get_user(user_id) 
        bonuses_available = user.bonuses_available
        bonuses_gotten = user.bonuses_gotten
        referral_link = user.referral_link 
        text2 = f"\n\n–í–∞—à–∞ –ª–∏—á–Ω–∞—è —Ä–µ—Ñ —Å—Å—ã–ª–∫–∞:\n{referral_link}"
        await bot.send_message(user_id, texts.bonuses_tub_text1 + text2 + texts.bonuses_tub_text2 + f"{bonuses_gotten}"\
                                + "\n–î–æ—Å—Ç—É–ø–Ω–æ –±–æ–Ω—É—Å–æ–≤: " + f"{bonuses_available}", reply_markup=kb.bonuses_markup)
    except:
        await bot.send_message(user_id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ –±–æ—Ç–∞")
        
async def resources_tub(user_id):
    resurses_text = '\n\n–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª: https://t.me/Levels_up'
    await bot.send_message(user_id, "üîó –†–µ—Å—É—Ä—Å—ã" + resurses_text, reply_markup=kb.resources_markup)

async def info_tub(user_id):
    await bot.send_message(user_id, "üîé –ò–Ω—Ñ–æ"+ texts.info_text, reply_markup=kb.info_markup)

async def switch_tubs(code , user_id):
    if code == "menu":
        await utils.main_menu(user_id)
    elif code == "profile":
        await utils.profile_tub(user_id)
    elif code == "resources":
        await utils.resources_tub(user_id)
    elif code == "level":
        await utils.level_tub(user_id)
    elif code == "balance":
        await utils.balance_tub(user_id)
    elif code == "partners":
        await utils.partners_tub(user_id)
    elif code == "bonuses":
        await utils.bonuses_tub(user_id)
    elif code == "info":
        await utils.info_tub(user_id)
# Guide
# –ü—Ä–æ –£—Ä–æ–≤–Ω–∏. –î–∞–µ–º –ø–µ—Ä–≤—ã–π –±–æ–Ω—É—Å. –û—Ç–∫—Ä—ã–≤–∞–π—Ç–µ.
async def start_guide1(user_id):
    try:
        await bot.send_photo(user_id, photo=database.photo_ids_test['choose_your_level'],caption=texts.start_guide1_text)
    except:
        await bot.send_message(user_id, texts.start_guide1_text)
    await asyncio.sleep(1)
   
    with database.Session() as session:
        user = session.query(User).filter(User.user_id == user_id).first()
        user.guide_stage  = 1
        if user.bonuses_gotten  == 0:
           await utils.add_bonus(user_id)
        elif user.bonuses_gotten  >= 1:
           await bot.send_message(user_id, '–•–º...\n–ö–∞–∂–µ—Ç—Å—è, –≤—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ –ø–µ—Ä–≤—ã–π –±–æ–Ω—É—Å')
        session.commit()
    await bot.send_message(user_id,"–ù–∞—á–Ω–µ–º —Å –Ω–µ–±–æ–ª—å—à–æ–≥–æ –±–æ–Ω—É—Å–∞", reply_markup=kb.bonus_button)

# –û—Ç–∫—Ä—ã–≤–∞–º –±–æ–Ω—É—Å 1. –ü—Ä–æ –±–æ–Ω—É—Å—ã. –î–ª—è –≤—Ç–æ—Ä–æ–≥–æ –±–æ–Ω—É—Å–∞ - –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª
async def start_guide2(user_id):
    await asyncio.sleep(1)
    await bot.send_message(user_id, "–°–Ω–∞—á–∞–ª–∞ –±–æ–Ω—É—Å—ã –º–æ–≥—É—Ç —Å–æ–¥–µ–∂–∞—Ç—å\n–æ—Ç 10 –¥–æ 50 —Ä—É–±–ª–µ–π.\n\n–î–∞–ª—å—à–µ - –±–æ–ª—å—à–µ üîº")
    await asyncio.sleep(1)
    await bot.send_message(user_id, "–ú–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –±–æ–Ω—É—Å –∑–∞ 2 –ø—Ä–æ—Å—Ç—ã—Ö –¥–µ–π—Å—Ç–≤–∏—è:")
    await asyncio.sleep(1)
    await bot.send_message(user_id, "1. –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª", reply_markup=kb.subscribe_buttons)
    # database.get_user(user_id).guide_stage = 2

    with database.Session() as session:
        user = session.query(User).filter(User.user_id == user_id).first()
        user.guide_stage  = 2
        session.commit()


# –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π –≤ –¢–ì.
async def start_guide3(user_id):  
        with database.Session() as session:
            user = session.query(User).filter(User.user_id == user_id).first() 
            user_channel_status = await bot.get_chat_member(chat_id='-1001973511610', user_id=user_id)
            if user_channel_status != 'left':
                if user_channel_status.status == "creator" or user_channel_status.status == "member" or user_channel_status.status == 'ChatMemberMember':
                    # database.get_user(user_id).guide_stage  = 3
                    user.guide_stage  = 3
                    if user.bonuses_gotten  == 1:
                        await utils.add_bonus(user_id)
                    elif user.bonuses_gotten  >= 2:
                        await bot.send_message(user_id, '–•–º...\n–ö–∞–∂–µ—Ç—Å—è, –≤—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ 2 –±–æ–Ω—É—Å–∞')
                    session.commit()
                    await bot.send_message(user_id, '–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É')
                    await bot.send_message(user_id, '2. –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –°–í–û–ï–ô —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π –≤ –¢–ì.')
                    await asyncio.sleep(2)
                    referral_link = user.referral_link 
                    try:
                        await bot.send_photo(user_id, photo=database.photo_ids_test['bonus_open'],\
                                caption= texts.start_guide3_text_1 +f"{referral_link}" + "\nüéÅ ‚¨ÜÔ∏è –ë–æ–Ω—É—Å –∑–¥–µ—Å—å ‚¨ÜÔ∏è üéÅ\n\n\n ‚ôªÔ∏è üîÅ ‚ùóÔ∏è–†–ï–ü–û–°–¢ –¢–£–¢‚ùóÔ∏è  ‚û°Ô∏è  ‚û°Ô∏è  ‚û°Ô∏è")
                    except:
                        await bot.send_message(user_id, '–ó–¥–µ—Å—å –º–æ–≥–ª–æ –±—ã—Ç—å –Ω–∞—à–µ —Ñ–æ—Ç–æ üòÑ\n' + texts.start_guide3_text_1 +f"{referral_link}" + "\nüéÅ ‚¨ÜÔ∏è –ë–æ–Ω—É—Å –∑–¥–µ—Å—å ‚¨ÜÔ∏è üéÅ\n\n\n ‚ôªÔ∏è üîÅ ‚ùóÔ∏è–†–ï–ü–û–°–¢ –¢–£–¢‚ùóÔ∏è  ‚û°Ô∏è  ‚û°Ô∏è  ‚û°Ô∏è")
                    await asyncio.sleep(2)
                    await bot.send_message(user_id, texts.start_guide3_text_2, reply_markup=kb.check_done_button)
                else:
                    await bot.send_message(user_id, '–ù–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏. –ú–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –ø–æ—Ç–µ—Ä—è—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –±–æ–Ω—É—Å üò±', reply_markup=kb.subscribe_buttons2)



# –ë–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª –Ω–µ—Ç –±–æ–Ω—É—Å
async def start_guide3_nosub(user_id):
    with database.Session() as session:
        user = session.query(User).filter(User.user_id == user_id).first()  
        user.guide_stage  = 3
        if user.bonuses_gotten == 1:
                        user.bonuses_gotten = 2
        session.commit()
    await bot.send_message(user_id, '‚òπÔ∏è')
    await bot.send_message(user_id, '2. –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π –≤ –¢–ì.')
    await asyncio.sleep(2)
    referral_link = user.referral_link 
    try:
        await bot.send_photo(user_id, photo=database.photo_ids_test['bonus_open'],\
                caption= texts.start_guide3_text_1 + f"{referral_link}" + "\nüéÅ ‚¨ÜÔ∏è –ë–æ–Ω—É—Å –∑–¥–µ—Å—å ‚¨ÜÔ∏è üéÅ\n\n\n‚ùóÔ∏è ‚ôªÔ∏è üîÅ –†–ï–ü–û–°–¢ —Ç—É—Ç ‚û°Ô∏è ‚û°Ô∏è ‚û°Ô∏è")
    except:
        await bot.send_message(user_id, '–ó–¥–µ—Å—å –º–æ–≥–ª–æ –±—ã—Ç—å –Ω–∞—à–µ —Ñ–æ—Ç–æ üòÑ\n' + texts.start_guide3_text_1 + f"{referral_link}" + "\nüéÅ ‚¨ÜÔ∏è –ë–æ–Ω—É—Å –∑–¥–µ—Å—å ‚¨ÜÔ∏è üéÅ\n\n\n‚ùóÔ∏è ‚ôªÔ∏è üîÅ –†–ï–ü–û–°–¢ —Ç—É—Ç ‚û°Ô∏è ‚û°Ô∏è ‚û°Ô∏è")
    await asyncio.sleep(2)



async def start_guide3_1(user_id):
    await bot.send_message(user_id, 'OK')
    await asyncio.sleep(1)
    await bot.send_message(user_id, '–ê –≤–æ—Ç –∏ –±–æ–Ω—É—Å!', reply_markup=kb.bonus_button)


async def start_guide4(user_id):
    with database.Session() as session:
        user = session.query(User).filter(User.user_id == user_id).first()
        user.guide_stage  = 4
        session.commit()
    await asyncio.sleep(1)
    await bot.send_message(user_id, texts.start_guide4_text, disable_web_page_preview=True)
    await asyncio.sleep(2)
    await bot.send_message(user_id, texts.start_guide4_text_2, reply_markup=kb.menu_button_markup)
    with database.Session() as session:
        user = session.query(User).filter(User.user_id == user_id).first()
        session.commit()



